# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  createdAt: DateTime!
  id: String!
  notes(orderBy: [NoteOrderByInput!], skip: Float, take: Float, where: NoteWhereInput): [Note!]!
  options: EnumCategoryOptions
  updatedAt: DateTime!
}

input CategoryCreateInput {
  notes: NoteCreateNestedManyWithoutCategoriesInput
  options: EnumCategoryOptions
}

input CategoryCreateNestedManyWithoutNotesInput {
  connect: [CategoryWhereUniqueInput!]
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  options: SortOrder
  updatedAt: SortOrder
}

input CategoryUpdateInput {
  notes: NoteUpdateManyWithoutCategoriesInput
  options: EnumCategoryOptions
}

input CategoryUpdateManyWithoutNotesInput {
  connect: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
}

input CategoryWhereInput {
  id: StringFilter
  notes: NoteListRelationFilter
  options: EnumCategoryOptions
}

input CategoryWhereUniqueInput {
  id: String!
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EnumCategoryOptions {
  Code
  Music
  Photography
  Piano
  Sports
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  createNote(data: NoteCreateInput!): Note!
  createTemplate(data: TemplateCreateInput!): Template!
  createUser(data: UserCreateInput!): User!
  deleteCategory(where: CategoryWhereUniqueInput!): Category!
  deleteNote(where: NoteWhereUniqueInput!): Note!
  deleteTemplate(where: TemplateWhereUniqueInput!): Template!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note!
  updateTemplate(data: TemplateUpdateInput!, where: TemplateWhereUniqueInput!): Template!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Note {
  categories(orderBy: [CategoryOrderByInput!], skip: Float, take: Float, where: CategoryWhereInput): [Category!]!
  content: String
  createdAt: DateTime!
  description: String
  id: String!
  slug: String
  title: String!
  updatedAt: DateTime!
  user: User
}

input NoteCreateInput {
  categories: CategoryCreateNestedManyWithoutNotesInput
  content: String
  description: String
  slug: String
  title: String!
  user: UserWhereUniqueInput
}

input NoteCreateNestedManyWithoutCategoriesInput {
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateNestedManyWithoutUsersInput {
  connect: [NoteWhereUniqueInput!]
}

input NoteListRelationFilter {
  every: NoteWhereInput
  none: NoteWhereInput
  some: NoteWhereInput
}

input NoteOrderByInput {
  content: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  slug: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input NoteUpdateInput {
  categories: CategoryUpdateManyWithoutNotesInput
  content: String
  description: String
  slug: String
  title: String
  user: UserWhereUniqueInput
}

input NoteUpdateManyWithoutCategoriesInput {
  connect: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
}

input NoteUpdateManyWithoutUsersInput {
  connect: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
}

input NoteWhereInput {
  categories: CategoryListRelationFilter
  content: StringNullableFilter
  description: StringNullableFilter
  id: StringFilter
  slug: StringNullableFilter
  title: StringFilter
  user: UserWhereUniqueInput
}

input NoteWhereUniqueInput {
  id: String!
}

type Query {
  _categoriesMeta(orderBy: [CategoryOrderByInput!], skip: Float, take: Float, where: CategoryWhereInput): MetaQueryPayload!
  _notesMeta(orderBy: [NoteOrderByInput!], skip: Float, take: Float, where: NoteWhereInput): MetaQueryPayload!
  _templatesMeta(orderBy: [TemplateOrderByInput!], skip: Float, take: Float, where: TemplateWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  categories(orderBy: [CategoryOrderByInput!], skip: Float, take: Float, where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  getGpt3Response(prompt: String!): String!
  note(where: NoteWhereUniqueInput!): Note
  notes(orderBy: [NoteOrderByInput!], skip: Float, take: Float, where: NoteWhereInput): [Note!]!
  template(where: TemplateWhereUniqueInput!): Template
  templates(orderBy: [TemplateOrderByInput!], skip: Float, take: Float, where: TemplateWhereInput): [Template!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Template {
  content: String
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

input TemplateCreateInput {
  content: String
  name: String!
}

input TemplateOrderByInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TemplateUpdateInput {
  content: String
  name: String
}

input TemplateWhereInput {
  content: StringNullableFilter
  id: StringFilter
  name: StringFilter
}

input TemplateWhereUniqueInput {
  id: String!
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  notes(orderBy: [NoteOrderByInput!], skip: Float, take: Float, where: NoteWhereInput): [Note!]!
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  notes: NoteCreateNestedManyWithoutUsersInput
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  notes: NoteUpdateManyWithoutUsersInput
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  notes: NoteListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
